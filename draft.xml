<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-openid-connect-cross-origin-authentication-latest">
  <front>
    <title>OpenID Connect Cross-Origin Authentication</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
      
      <t>
        This flow is optimized for clients implemented in a browser using a
        scripting language such as JavaScript.  It makes use of XMLHttpRequest
        to allow Clients to authenticate users without HTTP redirection.
      </t>
      
      <t>
        This specifications does not change the semantics of the OpenID Connect
        authentication flows.  It introduces a new endpoint to which the
        authentication request is sent and processed.
      </t>
      
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Terminology">
        <t>
          This specification also defines the following terms:
        </t>
      </section>
    </section>
    
    <section title="Overview">
      <t>
        TODO.
      </t>
    </section>
    
    <section title="Cross-Origin Authentication Endpoint">
      <t>
        The cross-origin authentication endpoint is used to authenticate an
        End-User.  Authentication is requested by sending an HTTP POST request
        directly from the Client, using XMLHttpRequest to the OP's cross-origin
        authentication endpoint.
      </t>
      <t>
        Use of the cross-origin authentication endpoint requires direct Client
        access to the End-User's credentials.  The credentials should only used
        when their is a high degree of trust between the End-User and the
        Client.
      </t>
      <t>
        Communication with the cross-origin authentication endpoint MUST utilize
        TLS.
      </t>
      
      <section title='Authentication Request'>
        <t>
          The client makes a request to the cross-origin authentication endpoint
          by sending the following parameters using the <spanx style='verb'>application/json</spanx>
          format with a character encoding of UTF-8 in the HTTP request entity-body:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='credential_type'>
              <vspace />
              REQUIRED. The type of credential used for authentication.  Value
              is case insensitive.
            </t>
          </list>
        </t>
        <t>
          The request MUST include additional parameters that are interpreted
          according to a credential type definition.
        </t>
        
        <figure>
          <preamble>
            The following is a non-normative JavaScript code sample that would
            cause the User-Agent to make an Authentication Request to the
            cross-origin authentication endpoint:
          </preamble>
          <artwork><![CDATA[
var req = new XMLHttpRequest();
req.addEventListener('load', function() {
  var data = JSON.parse(this.responseText);
  // handle response
});

req.withCredentials = true;
req.open('POST', "https://server.example.com/co/authenticate");
req.setRequestHeader('Content-Type', 'application/json');
var data = {
  credential_type: 'password',
  username: document.getElementById('username').value,
  password: document.getElementById('password').value
}
data = JSON.stringify(data);
req.send(data);
]]></artwork>
        </figure>
        
        <figure>
          <preamble>
            The following is a non-normative example request that would be
            sent by the Client to the Authorization Server:
          </preamble>
          <artwork><![CDATA[
POST /co/authenticate HTTP/1.1
Host: server.example.com
Origin: https://www.example.net
Content-Type: application/json
Cookie: 'sid=xxxxxxxx'

{ credential_type: 'password', username: 'jane', password: 's3cr1t' }
]]></artwork>
        </figure>
        
      </section>
      
      <section title='Authentication Response'>
        <t>
          TODO:
        </t>
      </section>
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
