<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-openid-connect-cross-origin-authentication-latest">
  <front>
    <title>OpenID Connect Cross-Origin Authentication</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
      
      <t>
        This flow is optimized for clients implemented in a browser using a
        scripting language such as JavaScript.  It makes use of XMLHttpRequest
        to allow Clients to authenticate users without HTTP redirection.
      </t>
      
      <t>
        This specification does not change the semantics of the OpenID Connect
        authentication flows.  It introduces a new endpoint to which the
        authentication request is sent and processed.
      </t>
      
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Terminology">
        <t>
          This specification also defines the following terms:
          
          <list style="hanging"> 
          <t hangText="Login Ticket:"><vspace blankLines="1"/>
            A single-use ticket representing a valid authentication which can be
            exchanged for tokens, including access tokens and ID tokens.</t>
          </list> 
        </t>
      </section>
    </section>
    
    <section title="Overview">
      <t>
        OpenID Connect, in building upon OAuth 2.0, allows a service to delegate
        authentication responsibilities to a centralized authorization server.
        In many deployment scenarios, enabling single sign-on is a motivating
        factor for implementing OpenID Connect, as it allows a user to access
        multiple services without re-authentication.
      </t>
      <t>
        In some instances a service may have multiple domains that act as
        primary points of interaction with the user.  For example, an online
        retailer may operate category-focused sites at www.phoneshop.example
        and www.camerashop.example.  The pages on each domain present the user
        with a traditional login dialog, prompting for a username and password.
        Because the retailer maintains a single user directory, a single set of
        user credentials works on both domains.
      </t>
      <t>
        In order to improve the shopping experience, the retailer has decided
        to allow single-sign on by operating an OpenID Provider at
        login.shop.example.  As part of that deployment, the retailer should
        consider replacing the login dialog on each site with a single "sign-in"
        button that redirects to login.shop.example and presents a unified login
        experience.  In some circumstances, however, it may be desireable to
        continue to accept credentials directly on each separate domain.
      </t>
      <t>
        The cross-origin authentication endpoint offers a solution that can
        satisfy this scenario.
      </t>
    </section>
    
    <section title="Cross-Origin Authentication Endpoint">
      <t>
        The cross-origin authentication endpoint is used to authenticate an
        End-User.  Authentication is requested by sending an HTTP POST request
        directly from the Client, using XMLHttpRequest to the OP's cross-origin
        authentication endpoint.
      </t>
      <t>
        Use of the cross-origin authentication endpoint requires direct Client
        access to the End-User's credentials.  The credentials should only used
        when there is a high degree of trust between the End-User and the
        Client.
      </t>
      <t>
        Communication with the cross-origin authentication endpoint MUST utilize
        TLS.
      </t>
      
      <section title='Authentication Request'>
        <t>
          The client makes a request to the cross-origin authentication endpoint
          by sending the following parameters using the <spanx style='verb'>application/json</spanx>
          format with a character encoding of UTF-8 in the HTTP request entity-body:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='credential_type'>
              <vspace />
              REQUIRED. The type of credential used for authentication.  Value
              is case insensitive.
            </t>
            
            <t hangText='client_id'>
              <vspace />
              REQUIRED. The client identifier.
            </t>
          </list>
        </t>
        <t>
          The request MUST include additional parameters that are interpreted
          according to a credential type definition.
        </t>
        
        <figure>
          <preamble>
            The following is a non-normative JavaScript code sample that would
            cause the User-Agent to make an Authentication Request to the
            cross-origin authentication endpoint:
          </preamble>
          <artwork><![CDATA[
var req = new XMLHttpRequest();
req.addEventListener('load', function() {
  var data = JSON.parse(this.responseText);
  // handle response
});

req.open('POST', 'https://server.example.com/co/authenticate');
req.withCredentials = true; // OPTIONAL
req.setRequestHeader('Content-Type', 'application/json');
var data = {
  client_id: 's6BhdRkqt3',
  credential_type: 'password',
  username: document.getElementById('username').value,
  password: document.getElementById('password').value
}
data = JSON.stringify(data);
req.send(data);
]]></artwork>
        </figure>
        
        <figure>
          <preamble>
            The following is a non-normative example request that would be
            sent by the Client to the Authorization Server:
          </preamble>
          <artwork><![CDATA[
POST /co/authenticate HTTP/1.1
Host: server.example.com
Origin: https://www.example.net
Content-Type: application/json

{ "client_id": "s6BhdRkqt3", "credential_type": "password",
  "username": "jane", "password": "s3cr1t" }
]]></artwork>
        </figure>
        
        <t>
          The Client SHOULD:
        </t>
        <t>
          <list style='symbols'>
            <t>
              set XMLHttpRequest.withCredentials to true, which will include
              cookies in the HTTP request and allow cookies to be set by the HTTP
              response.  Note that even with this set, browser policy may
              prevent this behavior.
            </t>
            <t>
              include cross-origin confirmation parameters in the HTTP request,
              such as those defined by Proof Key for Cross-Origin Requests by
              OAuth Public Clients.  Such confirmation allows a session to be
              initiated subsequent to the authentication request, in the
              scenario in which cookies are unable to be set in the HTTP
              response from the OpenID Provider.
            </t>
          </list>
        </t>
        
        <t>
          The OpenID Provider MUST:
        </t>
        <t>
          <list style='symbols'>
            <t>
              ensure that the Origin header is present and that its value
              corresponds to the Client's origin previously established with the
              authorization server during the client registration process,
            </t>
            <t>
              verify that the client is allowed to use the cross-origin
              authentication flow.
            </t>
            <t>
              verify the authentication credentials.
            </t>
          </list>
        </t>
      </section>
      
      <section title="Session Establishment">
        <t>
          If the authentication request is valid and authorized, the OpenID
          Provider SHOULD establish a session for the authenticated End-User.
        </t>
        
        <t>
          The following scenarios deserve special attention due to the security
          implications of establishing sessions in response to cross-origin
          requests.
        </t>
        
        <section title="No Existing Session">
          <t>
            If no existing login session exists at the OpenID Provider, a
            new login session can be established without adverse consequences.
          </t>
        </section>
        
        <section title="Existing Session for Same End-User">
          <t>
            If an existing login session exists at the OpenID Provider for the
            authenticated End-User, the existing session should be preserved.
            An additional login session SHOULD NOT be established.
          </t>
        </section>
        
        <section title="Existing Session for Different End-User">
          <t>
            If an existing login session exists at the OpenID Provider for an
            End-User other than the authenticated End-User, an additional login
            session SHOULD be established for the authenticated End-User.
            The existing session for the other End-User SHOULD be preserved.
          </t>
          <t>
            In particular, the other End-User's session SHOULD NOT be terminated
            in order to avoid adverse consequences with other Clients that may
            have already federated the other End-User's session.
          </t>
        </section>
      </section>
      
      <section title='Authentication Response'>
        <t>
          If the authentication request is valid and authorized, the OpenID
          Provider constructs the response by adding the following parameters to
          the entity-body of the HTTP response with a 200 (OK) status code:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='login_ticket'>
              <vspace />
              REQUIRED. The Login Ticket representing the valid authentication.
            </t>
          </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response
          using the <spanx style='verb'>application/json</spanx> media type as
          defined by <xref target='RFC4627'/>.
        </t>
        <t>
          When making use of cross-origin authentication, communication occurs
          directly between the Client and OP, without using HTTP redirection.
          Furthermore, clients implemented in a browser are public clients and
          unable to be authenticated.  These two limitations imply that it is
          impossible to verify the identity of the Client making the request.
        </t>
        <t>
          Due to the lack of Client identity verification, the Login Ticket MUST
          be confidentiality protected from the Client.  The Login Ticket SHOULD
          be exchanged by the Client at the Authorization Endpoint for an ID
          Token and/or Access Token and MAY be exchanged in a mode that does not
          require further End-User interaction.
        </t>
      </section>
      
      <section title='Authentication Error Response' anchor="token-err-res">
        <t>
          If the authentication request failed End-User authentication or is
          invalid, the authorization server responds with an HTTP 400 (Bad
          Request) status code (unless specified otherwise) and includes the
          following parameters with the response:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='error'>
              <vspace />
              REQUIRED. A single ASCII error code from the following:
              
              <list style='hanging' hangIndent='6'>
                <t hangText='invalid_request'>
                  <vspace />
                  The request is missing a required parameter, includes an
                  unsupported parameter value (other than credential type),
                  repeats a parameter, or is otherwise malformed.
                </t>
                <t hangText='unauthorized_client'>
                  <vspace />
                  The client is not authorized to use cross-origin
                  authentication or the origin of the request is invalid.
                </t>
                <t hangText='access_denied'>
                  <vspace />
                  The credentials are invalid or the OpenID Provider denied the
                  request.
                </t>
                <t hangText='unsupported_credential_type'>
                  <vspace />
                  The OpenID Provider does not support issuing an ID Token using
                  this method.
                </t>
                <t hangText='server_error'>
                  <vspace />
                  The authorization server encountered an unexpected condition
                  that prevented it from fulfilling the request.
                </t>
              </list>
            </t>
            <t hangText='error_description'>
              <vspace />
              OPTIONAL. A human-readable ASCII text providing additional
              information, used to assist the client developer in
              understanding the error that occurred.
            </t>
            <t hangText='error_uri'>
              <vspace />
              OPTIONAL. A URI identifying a human-readable web page with
              information about the error, used to provide the client
              developer with additional information about the error.
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="Authentication Credentials">
      <t>
        To authenticate an End-User, the client first obtains the End-User's
        credentials.  This specification defines a single credential type:
        password.  It also provides an extension mechanism for defining
        additional credential types.
      </t>
      
      <section title="End-User Password Credentials">
        <t>
          The end-user password credentials type is suitable in cases where the
          End-User has a trust relationship with the client, such as a website
          known to be operated by a trusted organization.  The authorization
          server should take special care when enabling this credential type and
          only allow it when other flows are not viable.
        </t>
        
        <section title="Authentication Request">
          <t>
            The client makes a request to the token endpoint by adding the
            following parameters using the <spanx style='verb'>application/json</spanx>
            format with a character encoding of UTF-8 in the HTTP request
            entity-body:
          
            <list style="hanging">
              <t hangText="credential_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to "password".</t>

              <t hangText="username"> <vspace blankLines="1"/>
                REQUIRED.  The End-User username.</t>

              <t hangText="password"> <vspace blankLines="1"/>
                REQUIRED.  The End-User password..</t>
                
              <t hangText='client_id'> <vspace blankLines="1"/>
                REQUIRED.  The client identifier..
              </t>
            </list>
          </t>
          <t>
            The OpenID Provider MUST:
          </t>
          <t>
            <list style='symbols'>
              <t>
                validate the End-User password credentials using its existing
                password validation algorithm.
              </t>
            </list>
          </t>
        </section>
      </section>
    </section>
    
    <section title="Session Initiation and Authorization">
      <t>
        Having authenticated an End-User, it is often desirable to establish a
        session and obtain authorization.  Session establishment enables single
        sign-on, so the End-User doesn't need to authenticate to the OpenID
        Provider each time they use a new app (unless required by authorization
        server policy).  Authorization allows the Client to obtain additional
        access to the End-User's identity information and protected resources.
      </t>
      <t>
        In order to ensure that the session is established in the same
        User-Agent from which the Authentication Request was sent, session
        establishment makes use of the Authorization Endpoint, using
        HTTP redirection, as defined by OAuth 2.0 and extended by OpenID
        Connect.
      </t>
      <t>
        Similarly, use of HTTP redirection allows the Client's identity to be
        verified, and consent to be obtained for authorization.  It also ensures
        that any tokens issued are delivered to the intedended client via a
        redirect endpoint or HTML5 web messaging.
      </t>
      
      <section title='Authorization Request'>
        <t>
          The client makes a request to the Authorization Endpoint in the manner
          specified by OpenID Connect.  If session initiation is requested, the
          ID Token from the Authentication Request is included as the value of
          the <spanx style='verb'>id_token_hint</spanx> parameter.
        </t>
        <figure>
          <preamble>
            The following is a non-normative example request that would be
            sent by the Client to the Authorization Server:
          </preamble>
          <artwork><![CDATA[
GET /authorize?
  response_type=token
  &id_token_hint=ey...
  &scope=openid%20profile%20email
  &client_id=s6BhdRkqt3
  &state=af0ifjsldkj
  &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1
Host: server.example.com
]]></artwork>
        </figure>
      </section>
      
      <section title='Session Initiation Validation'>
        <t>
          If, as a result of processing the authorization request, the OpenID
          Provider initiates a session, it MUST validate the id_token in the
          request received as follows:
        </t>
        <t>
          <list style='numbers'>
            <t>
              Verify the signature and/or encryption applied to the ID Token.
            </t>
            <t>
              The Issuer Identifier for the OpenID Provider MUST exactly match
              the value of the iss (issuer) claim.
            </t>
            <t>
              The OpenID Provider MUST validate that the aud (audience) claim
              contains its Issuer Identifier.
            </t>
            <t>
              The OpenID Provider MUST validate that the azp (authorized party)
              claim is present and that it matches the client_id value in the
              authorization request.
            </t>
            <t>
              The OpenID Provider MUST validate that the rfp (request forgery
              protection) claim is present and contains a verifiable identifier
              for the browser session, that cannot be guessed by a third party,
              including the Client.
            </t>
          </list>
        </t>
      </section>
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
