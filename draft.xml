<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-openid-connect-cross-origin-authentication-latest">
  <front>
    <title>OpenID Connect Cross-Origin Authentication</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>
        OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
        protocol. It enables Clients to verify the identity of the End-User
        based on the authentication performed by an Authorization Server, as
        well as to obtain basic profile information about the End-User in an
        interoperable and REST-like manner.
      </t>
        
      <t>
        This specification describes a cross-origin authentication flow which
        allows Clients to directly control the authentication ceremony, initiate
        a session at the Authorization Server, and request authorization from
        the Authorization Server after the authentication ceremony is complete.
      </t>
      
      <t>
        This flow is optimized for clients implemented in a browser using a
        scripting language such as JavaScript.  It makes use of XMLHttpRequest
        to allow Clients to authenticate users without HTTP redirection.
      </t>
      
      <t>
        This specifications does not change the semantics of the OpenID Connect
        authentication flows.  It introduces a new endpoint to which the
        authentication request is sent and processed.
      </t>
      
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Terminology">
        <t>
          This specification also defines the following terms:
        </t>
      </section>
    </section>
    
    <section title="Overview">
      <t>
        TODO.
      </t>
    </section>
    
    <section title="Cross-Origin Authentication Endpoint">
      <t>
        The cross-origin authentication endpoint is used to authenticate an
        End-User.  Authentication is requested by sending an HTTP POST request
        directly from the Client, using XMLHttpRequest to the OP's cross-origin
        authentication endpoint.
      </t>
      <t>
        Use of the cross-origin authentication endpoint requires direct Client
        access to the End-User's credentials.  The credentials should only used
        when there is a high degree of trust between the End-User and the
        Client.
      </t>
      <t>
        Communication with the cross-origin authentication endpoint MUST utilize
        TLS.
      </t>
      
      <section title='Authentication Request'>
        <t>
          The client makes a request to the cross-origin authentication endpoint
          by sending the following parameters using the <spanx style='verb'>application/json</spanx>
          format with a character encoding of UTF-8 in the HTTP request entity-body:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='credential_type'>
              <vspace />
              REQUIRED. The type of credential used for authentication.  Value
              is case insensitive.
            </t>
          </list>
        </t>
        <t>
          The request MUST include additional parameters that are interpreted
          according to a credential type definition.
        </t>
        
        <figure>
          <preamble>
            The following is a non-normative JavaScript code sample that would
            cause the User-Agent to make an Authentication Request to the
            cross-origin authentication endpoint:
          </preamble>
          <artwork><![CDATA[
var req = new XMLHttpRequest();
req.addEventListener('load', function() {
  var data = JSON.parse(this.responseText);
  // handle response
});

req.open('POST', 'https://server.example.com/co/authenticate');
req.setRequestHeader('Content-Type', 'application/json');
var data = {
  credential_type: 'password',
  username: document.getElementById('username').value,
  password: document.getElementById('password').value
}
data = JSON.stringify(data);
req.send(data);
]]></artwork>
        </figure>
        
        <figure>
          <preamble>
            The following is a non-normative example request that would be
            sent by the Client to the Authorization Server:
          </preamble>
          <artwork><![CDATA[
POST /co/authenticate HTTP/1.1
Host: server.example.com
Origin: https://www.example.net
Content-Type: application/json

{ credential_type: 'password', username: 'jane', password: 's3cr1t' }
]]></artwork>
        </figure>
        
        <t>
          The OpenID Provider MUST:
        </t>
        <t>
          <list style='symbols'>
            <t>
              ensure that the Origin header is present and that its value
              corresponds to the Client's origin previously established with the
              authorization server during the client registration process,
            </t>
            <t>
              verify that the client is allowed to use the cross-origin
              authentication flow.
            </t>
          </list>
        </t>
      </section>
      
      <section title='Authentication Response'>
        <t>
          If the authentication request is valid and authorized, the OpenID
          Provider constructs the response by adding the following parameters to
          the entity-body of the HTTP response with a 200 (OK) status code:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='id_token'>
              <vspace />
              REQUIRED. The ID Token containing claims about the authenticated
              End-User.
            </t>
          </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response
          using the <spanx style='verb'>application/json</spanx> media type as
          defined by <xref target='RFC4627'/>.
        </t>
        <t>
          In the case of a cross-origin authentication request, the RP may
          already posess identity information about the user, such as a username
          or email address.  Furthermore, because authentication is performed
          directly between the Client and OP, without using HTTP redirection, it
          is not possible to prompt the user for consent to share protected
          information or verify the Client's identity and location to which
          tokens will be issued.
        </t>
        <t>
          Due to these limitations the OpenID Provider:
        </t>
        <t>
          <list style='symbols'>
            <t>
              SHOULD NOT add claims to the ID Token that were not otherwise
              revealed to the Client during the authentication request,
            </t>
            <t>
              MAY encrypt the ID Token so that it does not reveal any claims
              to the Client.  A token encrypted in this manner MAY be used by
              the client for session initiation,
            </t>
            <t>
              MUST NOT issue an access token or other credential that would
              permit access to additional information beyond identity claims.
            </t>
          </list>
        </t>
      </section>
      
      <section title='Authentication Error Response' anchor="token-err-res">
        <t>
          If the authentication request failed End-User authentication or is
          invalid, the authorization server responds with an HTTP 400 (Bad
          Request) status code (unless specified otherwise) and includes the
          following parameters with the response:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='error'>
              <vspace />
              REQUIRED. A single ASCII error code from the following:
              
              <list style='hanging' hangIndent='6'>
                <t hangText='invalid_request'>
                  <vspace />
                  The request is missing a required parameter, includes an
                  unsupported parameter value (other than credential type),
                  repeats a parameter, or is otherwise malformed.
                </t>
                <t hangText='unauthorized_client'>
                  <vspace />
                  The client is not authorized to use cross-origin
                  authentication or the origin of the request is invalid.
                </t>
                <t hangText='access_denied'>
                  <vspace />
                  The credentials are invalid or the OpenID Provider denied the
                  request.
                </t>
                <t hangText='unsupported_credential_type'>
                  <vspace />
                  The OpenID Provider does not support issuing an ID Token using
                  this method.
                </t>
                <t hangText='server_error'>
                  <vspace />
                  The authorization server encountered an unexpected condition
                  that prevented it from fulfilling the request.
                </t>
              </list>
            </t>
            <t hangText='error_description'>
              <vspace />
              OPTIONAL. A human-readable ASCII text providing additional
              information, used to assist the client developer in
              understanding the error that occurred.
            </t>
            <t hangText='error_uri'>
              <vspace />
              OPTIONAL. A URI identifying a human-readable web page with
              information about the error, used to provide the client
              developer with additional information about the error.
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="Session Initiation and Authorization">
      <t>
        Having authenticated an End-User, it is often desirable to establish a
        session and obtain authorization.  Session establishment enables single
        sign-on, so the End-User doesn't need to authenticate to the OpenID
        Provider each time they use a new app (unless required by authorization
        server policy).  Authorization allows the Client to obtain additional
        access to the End-User's identity information and protected resources.
      </t>
      <t>
        In order to ensure that the session is established in the same
        User-Agent from which the Authentication Request was sent, session
        establishment makes use of the Authorization Endpoint, using
        HTTP redirection, as defined by OAuth 2.0 and extended by OpenID
        Connect.
      </t>
      <t>
        Similarly, use of HTTP redirection allows the Client's identity to be
        verified, and consent to be obtained for authorization.  It also ensures
        that any tokens issued are delivered to the intedended client via a
        redirect endpoint or HTML5 web messaging.
      </t>
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
