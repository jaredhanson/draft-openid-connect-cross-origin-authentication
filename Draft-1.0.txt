



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: October 22, 2017                                 April 20, 2017


               OpenID Connect Cross-Origin Authentication
     draft-hanson-openid-connect-cross-origin-authentication-latest

Abstract

   OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
   protocol.  It enables Clients to verify the identity of the End-User
   based on the authentication performed by an Authorization Server, as
   well as to obtain basic profile information about the End-User in an
   interoperable and REST-like manner.

   This specification describes a cross-origin authentication flow which
   allows Clients to directly control the authentication ceremony,
   initiate a session at the Authorization Server, and request
   authorization from the Authorization Server after the authentication
   ceremony is complete.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 22, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Hanson                  Expires October 22, 2017                [Page 1]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
   protocol.  It enables Clients to verify the identity of the End-User
   based on the authentication performed by an Authorization Server, as
   well as to obtain basic profile information about the End-User in an
   interoperable and REST-like manner.

   This specification describes a cross-origin authentication flow which
   allows Clients to directly control the authentication ceremony,
   initiate a session at the Authorization Server, and request
   authorization from the Authorization Server after the authentication
   ceremony is complete.

   This flow is optimized for clients implemented in a browser using a
   scripting language such as JavaScript.  It makes use of
   XMLHttpRequest to allow Clients to authenticate users without HTTP
   redirection.

   This specification does not change the semantics of the OpenID
   Connect authentication flows.  It introduces a new endpoint to which
   the authentication request is sent and processed.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

2.  Overview

   OpenID Connect, in building upon OAuth 2.0, allows a service to
   delegate authentication responsibilities to a centralized
   authorization server.  In many deployment scenarios, enabling single
   sign-on is a motivating factor for implementing OpenID Connect, as it
   allows a user to access multiple services without re-authentication.




Hanson                  Expires October 22, 2017                [Page 2]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


   In some instances a service may have multiple domains that act as
   primary points of interaction with the user.  For example, an online
   retailer may operate category-focused sites at www.phoneshop.example
   and www.camerashop.example.  The pages on each domain present the
   user with a traditional login dialog, prompting for a username and
   password.  Because the retailer maintains a single user directory, a
   single set of user credentials works on both domains.

   In order to improve the shopping experience, the retailer has decided
   to allow single-sign on by operating an OpenID Provider at
   login.shop.example.  As part of that deployment, the retailer should
   consider replacing the login dialog on each site with a single "sign-
   in" button that redirects to login.shop.example and presents a
   unified login experience.  In some circumstances, however, it may be
   desireable to continue to accept credentials directly on each
   separate domain.

   The cross-origin authentication endpoint offers a solution that can
   satisfy this scenario.

3.  Cross-Origin Authentication Endpoint

   The cross-origin authentication endpoint is used to authenticate an
   End-User.  Authentication is requested by sending an HTTP POST
   request directly from the Client, using XMLHttpRequest to the OP's
   cross-origin authentication endpoint.

   Use of the cross-origin authentication endpoint requires direct
   Client access to the End-User's credentials.  The credentials should
   only used when there is a high degree of trust between the End-User
   and the Client.

   Communication with the cross-origin authentication endpoint MUST
   utilize TLS.

3.1.  Authentication Request

   The client makes a request to the cross-origin authentication
   endpoint by sending the following parameters using the "application/
   json" format with a character encoding of UTF-8 in the HTTP request
   entity-body:

   credential_type
         REQUIRED.  The type of credential used for authentication.
         Value is case insensitive.

   client_id
         REQUIRED.  The client identifier.



Hanson                  Expires October 22, 2017                [Page 3]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


   The request MUST include additional parameters that are interpreted
   according to a credential type definition.

   The following is a non-normative JavaScript code sample that would
   cause the User-Agent to make an Authentication Request to the cross-
   origin authentication endpoint:

   var req = new XMLHttpRequest();
   req.addEventListener('load', function() {
     var data = JSON.parse(this.responseText);
     // handle response
   });

   req.open('POST', 'https://server.example.com/co/authenticate');
   // OPTIONAL: req.withCredentials = true;
   req.setRequestHeader('Content-Type', 'application/json');
   var data = {
     client_id: 's6BhdRkqt3',
     credential_type: 'password',
     username: document.getElementById('username').value,
     password: document.getElementById('password').value
   }
   data = JSON.stringify(data);
   req.send(data);

   The following is a non-normative example request that would be sent
   by the Client to the Authorization Server:

   POST /co/authenticate HTTP/1.1
   Host: server.example.com
   Origin: https://www.example.net
   Content-Type: application/json

   { "client_id": "s6BhdRkqt3", "credential_type": "password",
     "username": "jane", "password": "s3cr1t" }

   The OpenID Provider MUST:

   o  ensure that the Origin header is present and that its value
      corresponds to the Client's origin previously established with the
      authorization server during the client registration process,

   o  verify that the client is allowed to use the cross-origin
      authentication flow.







Hanson                  Expires October 22, 2017                [Page 4]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


3.2.  Authentication Response

   If the authentication request is valid and authorized, the OpenID
   Provider constructs the response by adding the following parameters
   to the entity-body of the HTTP response with a 200 (OK) status code:

   login_ticket
         REQUIRED.  The ID Token containing claims about the
         authenticated End-User.

   The parameters are included in the entity body of the HTTP response
   using the "application/json" media type as defined by [RFC4627].

   In the case of a cross-origin authentication request, the RP may
   already posess identity information about the user, such as a
   username or email address.  Furthermore, because authentication is
   performed directly between the Client and OP, without using HTTP
   redirection, it is not possible to prompt the user for consent to
   share protected information or verify the Client's identity and
   location to which tokens will be issued.

   Due to these limitations the OpenID Provider:

   o  SHOULD NOT add claims to the ID Token that were not otherwise
      revealed to the Client during the authentication request,

   o  MAY encrypt the ID Token so that it does not reveal any claims to
      the Client.  A token encrypted in this manner MAY be used by the
      client for session initiation,

   o  MUST NOT issue an access token or other credential that would
      permit access to additional information beyond identity claims.

3.3.  Authentication Error Response

   If the authentication request failed End-User authentication or is
   invalid, the authorization server responds with an HTTP 400 (Bad
   Request) status code (unless specified otherwise) and includes the
   following parameters with the response:

   error
         REQUIRED.  A single ASCII error code from the following:

         invalid_request
               The request is missing a required parameter, includes an
               unsupported parameter value (other than credential type),
               repeats a parameter, or is otherwise malformed.




Hanson                  Expires October 22, 2017                [Page 5]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


         unauthorized_client
               The client is not authorized to use cross-origin
               authentication or the origin of the request is invalid.

         access_denied
               The credentials are invalid or the OpenID Provider denied
               the request.

         unsupported_credential_type
               The OpenID Provider does not support issuing an ID Token
               using this method.

         server_error
               The authorization server encountered an unexpected
               condition that prevented it from fulfilling the request.

   error_description
         OPTIONAL.  A human-readable ASCII text providing additional
         information, used to assist the client developer in
         understanding the error that occurred.

   error_uri
         OPTIONAL.  A URI identifying a human-readable web page with
         information about the error, used to provide the client
         developer with additional information about the error.

4.  Authentication Credentials

   To authenticate an End-User, the client first obtains the End-User's
   credentials.  This specification defines a single credential type:
   password.  It also provides an extension mechanism for defining
   additional credential types.

4.1.  End-User Password Credentials

   The end-user password credentials type is suitable in cases where the
   End-User has a trust relationship with the client, such as a website
   known to be operated by a trusted organization.  The authorization
   server should take special care when enabling this credential type
   and only allow it when other flows are not viable.

4.1.1.  Authentication Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/json" format with a
   character encoding of UTF-8 in the HTTP request entity-body:

   credential_type



Hanson                  Expires October 22, 2017                [Page 6]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


      REQUIRED.  Value MUST be set to "password".

   username

      REQUIRED.  The End-User username.

   password

      REQUIRED.  The End-User password..

   client_id

      REQUIRED.  The client identifier..

   The OpenID Provider MUST:

   o  validate the End-User password credentials using its existing
      password validation algorithm.

5.  Session Initiation and Authorization

   Having authenticated an End-User, it is often desirable to establish
   a session and obtain authorization.  Session establishment enables
   single sign-on, so the End-User doesn't need to authenticate to the
   OpenID Provider each time they use a new app (unless required by
   authorization server policy).  Authorization allows the Client to
   obtain additional access to the End-User's identity information and
   protected resources.

   In order to ensure that the session is established in the same User-
   Agent from which the Authentication Request was sent, session
   establishment makes use of the Authorization Endpoint, using HTTP
   redirection, as defined by OAuth 2.0 and extended by OpenID Connect.

   Similarly, use of HTTP redirection allows the Client's identity to be
   verified, and consent to be obtained for authorization.  It also
   ensures that any tokens issued are delivered to the intedended client
   via a redirect endpoint or HTML5 web messaging.

5.1.  Authorization Request

   The client makes a request to the Authorization Endpoint in the
   manner specified by OpenID Connect.  If session initiation is
   requested, the ID Token from the Authentication Request is included
   as the value of the "id_token_hint" parameter.






Hanson                  Expires October 22, 2017                [Page 7]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


   The following is a non-normative example request that would be sent
   by the Client to the Authorization Server:

   GET /authorize?
     response_type=token
     &id_token_hint=ey...
     &scope=openid%20profile%20email
     &client_id=s6BhdRkqt3
     &state=af0ifjsldkj
     &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1
   Host: server.example.com

5.2.  Session Initiation Validation

   If, as a result of processing the authorization request, the OpenID
   Provider initiates a session, it MUST validate the id_token in the
   request received as follows:

   1.  Verify the signature and/or encryption applied to the ID Token.

   2.  The Issuer Identifier for the OpenID Provider MUST exactly match
       the value of the iss (issuer) claim.

   3.  The OpenID Provider MUST validate that the aud (audience) claim
       contains its Issuer Identifier.

   4.  The OpenID Provider MUST validate that the azp (authorized party)
       claim is present and that it matches the client_id value in the
       authorization request.

   5.  The OpenID Provider MUST validate that the rfp (request forgery
       protection) claim is present and contains a verifiable identifier
       for the browser session, that cannot be guessed by a third party,
       including the Client.

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.





Hanson                  Expires October 22, 2017                [Page 8]

Internet-Draft OpenID Connect Cross-Origin Authentication     April 2017


   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/



































Hanson                  Expires October 22, 2017                [Page 9]
